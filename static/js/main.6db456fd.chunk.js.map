{"version":3,"sources":["types.ts","utils.ts","hooks/useModal.tsx","components/Button.tsx","difficulties.ts","components/ButtonWithDropdown.tsx","components/StatusBar.tsx","components/Block.tsx","components/Board.tsx","components/Modal.tsx","components/GameModal.tsx","components/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BlockValue","DifficultyLevel","getSurroundingNonBombBlocks","setupBoard","width","height","bombCount","initialBoard","defaultValue","arr","row_i","row","col_i","push","initialize2dArray","col","uncovered","value","position","flagged","placeBombs","withBombs","board","placedBombs","bombs","forEach","convert1dTo2d","addMarkers","Math","floor","length","r_offset","col_offset","c","r","BOMB","b","boardSize","bombPlacements","Set","size","add","random","map","block","has","convert2dTo1d","useModal","useState","isShowing","setIsShowing","success","setSuccess","showModal","clearModal","Button","styled","button","defaultConfig","DifficultyMap","Map","EASY","MEDIUM","HARD","Wrapper","div","StyledDropdown","ClickableOption","ButtonWithDropdown","props","text","options","handleSelectOption","active","setActive","as","onClick","option","handleOptionClick","key","StyledStatusBar","ChangeDifficultyButton","StatusBar","flagsLeft","wins","losses","currentDifficulty","onClickChangeDifficulty","keys","Cover","p","Bomb","span","attrs","role","explode","keyframes","ExplodingBomb","Flag","ColoredNumber","Block","aria-label","EMPTY","renderValue","Grid","table","GridRow","tr","GridItem","td","Board","onCellClick","onCellRightClick","cell_i","e","onContextMenu","ModalColor","StyledModal","background","showing","Modal","children","ButtonGroup","RestartButton","NextLevelButton","GameModal","handleRestart","showNext","handleNext","message","SUCCESS","FAILURE","MiddleOfScreen","Container","Title","h1","Game","winCount","setWinCount","lossCount","setLossCount","endGame","won","difficultyLevel","setDifficultyLevel","get","changeDifficulty","level","config","undefined","restartGame","setBombs","setBoard","setFlagsLeft","uncover","surrounding","recoveredFlags","uncoverBlock","newBoard","preventDefault","alreadyFlagged","boardState","flagBlock","newBombs","bomb","reduce","allFlagged","current","console","log","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.6db456fd.chunk.js","sourcesContent":["export enum BlockValue {\n  BOMB = -1,\n  EMPTY = 0,\n  ONE = 1,\n  TWO = 2,\n  THREE = 3,\n}\n\nexport type BlockType = {\n  uncovered: boolean;\n  value: BlockValue;\n  position: GridPosition;\n  flagged: boolean;\n};\n\nexport type GridPosition = {\n  row: number;\n  col: number;\n};\n\nexport type Bomb = {\n  position: GridPosition;\n  flagged: boolean;\n};\n\nexport enum DifficultyLevel {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\n","import { BlockType, BlockValue, GridPosition, Bomb } from \"./types\";\n\nexport const setupBoard = (\n  width: number,\n  height: number,\n  bombCount: number\n) => {\n  let initialBoard = initialize2dArray(width, height, (row, col) => ({\n    uncovered: false,\n    value: 0,\n    position: { row, col },\n    flagged: false,\n  }));\n  const { board: withBombs, bombs: placedBombs } = placeBombs(\n    initialBoard,\n    bombCount\n  );\n  const bombs: Bomb[] = [];\n  placedBombs.forEach((position) => {\n    bombs.push({\n      position: convert1dTo2d(position, width, height),\n      flagged: false,\n    });\n  });\n  initialBoard = addMarkers(withBombs);\n  return { initialBoard, bombs };\n};\n\nexport function initialize2dArray<T>(\n  width: number,\n  height: number,\n  defaultValue: (row_i: number, col_i: number) => T\n) {\n  const arr = [];\n  for (let row_i = 0; row_i < height; row_i++) {\n    const row = [];\n    for (let col_i = 0; col_i < width; col_i++) {\n      row.push(defaultValue(row_i, col_i));\n    }\n    arr.push(row);\n  }\n  return arr;\n}\n\nexport const convert1dTo2d = (\n  position: number,\n  width: number,\n  height: number\n) => {\n  return {\n    col: position % width,\n    row: Math.floor(position / height),\n  };\n};\n\nexport const convert2dTo1d = (\n  row: number,\n  col: number,\n  width: number,\n  height: number\n) => {\n  return height * row + col;\n};\n\nexport function* getSurroundingNonBombBlocks(\n  board: BlockType[][],\n  { row, col }: GridPosition\n) {\n  const width = board.length;\n  const height = board[0]?.length;\n  for (let r_offset = -1; r_offset <= 1; r_offset++) {\n    for (let col_offset = -1; col_offset <= 1; col_offset++) {\n      const r = row + r_offset;\n      const c = col + col_offset;\n      if (\n        r >= 0 &&\n        r < height &&\n        c >= 0 &&\n        c < width &&\n        board[r][c].value !== BlockValue.BOMB &&\n        !(r === row && c === col) // skip block in question\n      ) {\n        yield { row: r, col: c };\n      }\n    }\n  }\n}\n\nexport const addMarkers = (board: BlockType[][]) => {\n  const width = board.length;\n  const height = board[0]?.length;\n  for (let row = 0; row < width; row++) {\n    for (let col = 0; col < height; col++) {\n      if (board[row][col].value === BlockValue.BOMB) {\n        // Add 1 to all surrounding blocks\n        for (const b of getSurroundingNonBombBlocks(board, { row, col })) {\n          board[b.row][b.col].value += 1;\n        }\n      }\n    }\n  }\n  return board;\n};\n\nexport const placeBombs = (board: BlockType[][], bombCount: number) => {\n  const boardSize = board.length * board.length;\n  const bombPlacements = new Set<number>();\n\n  while (bombPlacements.size < bombCount) {\n    bombPlacements.add(Math.floor(Math.random() * boardSize));\n  }\n\n  return {\n    board: board.map((row, row_i) =>\n      row.map((block, col_i) => {\n        if (\n          bombPlacements.has(\n            convert2dTo1d(row_i, col_i, board.length, board.length)\n          )\n        ) {\n          return { ...block, value: BlockValue.BOMB };\n        }\n        return block;\n      })\n    ),\n    bombs: bombPlacements,\n  };\n};\n\n/**\n * Uncover a single block on the board.\n * If the block is empty, then recursively uncover adjacent blocks\n * to find non-empty blocks.\n * @param board full board. Will return a new copy\n * @param block reference to block on the board to uncover. Must be an exact ref\n */\nexport const uncoverBlock = (board: BlockType[][], block: BlockType) => {\n  const uncovered = new Set<GridPosition>();\n  const uncover = ({ value, position }: BlockType) => {\n    if (uncovered.has(position)) {\n      return;\n    }\n    uncovered.add(position);\n    if (value === BlockValue.EMPTY) {\n      for (const surrounding of getSurroundingNonBombBlocks(board, position)) {\n        uncover(board[surrounding.row][surrounding.col]);\n      }\n    }\n  };\n  uncover(block);\n  let recoveredFlags = 0;\n  return {\n    board: board.map((row) =>\n      row.map((block) => {\n        if (uncovered.has(block.position)) {\n          if (block.flagged) {\n            recoveredFlags++;\n          }\n          return { ...block, uncovered: true, flagged: false };\n        }\n        return block;\n      })\n    ),\n    recoveredFlags,\n  };\n};\n\nexport const flagBlock = (board: BlockType[][], block: BlockType) => {\n  return board.map((row) =>\n    row.map((b) =>\n      b.position === block.position ? { ...b, flagged: !b.flagged } : b\n    )\n  );\n};\n","import { useState } from \"react\";\n\nconst useModal = () => {\n  const [isShowing, setIsShowing] = useState(false);\n  const [success, setSuccess] = useState(false);\n\n  return {\n    showModal: (success: boolean) => {\n      setSuccess(success);\n      setIsShowing(true);\n    },\n    clearModal: () => {\n      setIsShowing(false);\n    },\n    isShowing,\n    success,\n  };\n};\n\nexport default useModal;\n","import styled from \"styled-components\";\n\nconst Button = styled.button`\n  padding: 10px;\n  border-radius: 10px;\n  border: none;\n  cursor: pointer;\n`;\n\nexport default Button;\n","import { DifficultyLevel } from \"./types\";\n\ntype Difficulty = {\n  size: {\n    width: number;\n    height: number;\n  };\n  bombCount: number;\n};\n\nexport const defaultConfig = {\n  size: {\n    width: 5,\n    height: 5,\n  },\n  bombCount: 4,\n};\n\nconst DifficultyMap = new Map<DifficultyLevel, Difficulty>([\n  [DifficultyLevel.EASY, defaultConfig],\n  [\n    DifficultyLevel.MEDIUM,\n    {\n      size: {\n        width: 10,\n        height: 10,\n      },\n      bombCount: 20,\n    },\n  ],\n  [\n    DifficultyLevel.HARD,\n    {\n      size: {\n        width: 15,\n        height: 15,\n      },\n      bombCount: 56,\n    },\n  ],\n]);\n\nexport default DifficultyMap;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Button from \"./Button\";\n\nconst Wrapper = styled.div`\n  display: inline-block;\n  position: relative;\n`;\n\nconst StyledDropdown = styled.div`\n  position: absolute;\n  background-color: lightslategray;\n  z-index: 700;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ClickableOption = styled(Button)`\n  padding: 2px;\n  border-radius: 0px;\n  width: 100%;\n\n  &:hover {\n    background-color: darkgray;\n  }\n`;\n\ntype ButtonWithDropdownProps = {\n  as: any;\n  text: string;\n  options: string[];\n  handleSelectOption?: (selected: string) => void;\n};\n\nconst ButtonWithDropdown: React.FC<ButtonWithDropdownProps> = (props) => {\n  const { text, options, handleSelectOption } = props;\n  const [active, setActive] = useState(false);\n\n  const handleOptionClick = (option: string) => {\n    handleSelectOption && handleSelectOption(option);\n    setActive(false);\n  };\n  return (\n    <Wrapper>\n      {/* {props.as ?? <Button>Click me</Button>} */}\n      <props.as onClick={() => setActive(!active)}>{text}</props.as>\n      {active && (\n        <StyledDropdown>\n          {options.map((option) => (\n            <ClickableOption\n              onClick={() => handleOptionClick(option)}\n              key={option}\n            >\n              {option}\n            </ClickableOption>\n          ))}\n        </StyledDropdown>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default ButtonWithDropdown;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Button from \"./Button\";\nimport DifficultyMap from \"../difficulties\";\nimport { DifficultyLevel } from \"../types\";\nimport ButtonWithDropdown from \"./ButtonWithDropdown\";\n\nconst StyledStatusBar = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n  margin-top: 0.5em;\n  margin-bottom: 0.5em;\n`;\n\nconst ChangeDifficultyButton = styled(Button)`\n  padding: 0.3em;\n  background-color: cyan;\n  &:hover {\n    background-color: #34f1f1;\n  }\n`;\n\nconst StatusBar: React.FC<{\n  flagsLeft: number;\n  wins: number;\n  losses: number;\n  currentDifficulty: DifficultyLevel;\n  onClickChangeDifficulty: (level: DifficultyLevel) => void;\n}> = ({\n  flagsLeft,\n  wins,\n  losses,\n  currentDifficulty,\n  onClickChangeDifficulty,\n}) => {\n  return (\n    <StyledStatusBar>\n      <div>\n        <span>Difficulty: {currentDifficulty}</span>\n        <ButtonWithDropdown\n          as={ChangeDifficultyButton}\n          text=\"change\"\n          options={[...DifficultyMap.keys()]}\n          handleSelectOption={(option: string) =>\n            onClickChangeDifficulty(option as DifficultyLevel)\n          }\n        ></ButtonWithDropdown>\n      </div>\n      <span>Flags Left: {flagsLeft}</span>\n      <span>W: {wins}</span>\n      <span>L: {losses}</span>\n    </StyledStatusBar>\n  );\n};\n\nexport default StatusBar;\n","import React from \"react\";\nimport styled, { keyframes } from \"styled-components\";\nimport { BlockValue, BlockType } from \"../types\";\n\ntype CoverProps = {\n  uncovered: boolean;\n};\nconst Cover = styled.div`\n  background-color: hsla(235, 7%, 80%, 1);\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  z-index: 100;\n  top: 0.5px; // Offset the content border\n  left: 0.5px; // Offset the content border\n  cursor: pointer;\n  opacity: ${(p: CoverProps) => (p.uncovered ? 0 : 1)};\n  transition: opacity ${(p: CoverProps) => (p.uncovered ? \"0.5s\" : \"0s\")};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  &:hover {\n    background-color: hsl(235, 7%, 60%);\n  }\n`;\n\nconst Bomb = styled.span.attrs({\n  role: \"img\",\n})`\n  &::after {\n    content: \"💣\";\n  }\n`;\n\nconst explode = keyframes`\n  from {\n    content: \"💣\";\n  }\n  to {\n    content: \"💥\";\n  }\n`;\n\nconst ExplodingBomb = styled(Bomb)`\n  &::after {\n    animation: 1s ${explode} infinite both;\n  }\n`;\n\nconst Flag = styled.span.attrs({\n  role: \"img\",\n})`\n  &::after {\n    font-size: 1.5rem;\n    content: \"🏴‍☠️\";\n  }\n`;\n\nconst ColoredNumber = styled.span`\n  color: ${(p: { value: number }) =>\n    p.value === 1 ? \"green\" : p.value === 2 ? \"blue\" : \"red\"};\n`;\n\nexport const Block: React.FC<BlockType> = ({ uncovered, value, flagged }) => {\n  const renderValue = () => {\n    switch (value) {\n      case BlockValue.BOMB:\n        return uncovered ? (\n          <ExplodingBomb aria-label=\"bomb-go-boom\" />\n        ) : (\n          <Bomb aria-label=\"bomb\" />\n        );\n      case BlockValue.EMPTY:\n        return <span>&nbsp;</span>;\n      default:\n        return <ColoredNumber value={value}>{value}</ColoredNumber>;\n    }\n  };\n  return (\n    <>\n      <Cover uncovered={uncovered}>{flagged && <Flag />}</Cover>\n      {renderValue()}\n    </>\n  );\n};\n\nexport default Block;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { BlockType } from \"../types\";\nimport Block from \"./Block\";\n\nconst Grid = styled.table`\n  width: 500px;\n  height: 500px;\n  border: 1px solid black;\n  border-spacing: 0px;\n  table-layout: fixed;\n`;\n\nconst GridRow = styled.tr``;\n\nconst GridItem = styled.td`\n  border: 0.5px solid black;\n  text-align: center;\n  position: relative;\n  overflow: hidden;\n`;\n\nconst Board: React.FC<{\n  board: BlockType[][];\n  onCellClick: (e: React.MouseEvent, block: BlockType) => void;\n  onCellRightClick: (e: React.MouseEvent, block: BlockType) => void;\n}> = ({ board, onCellClick, onCellRightClick }) => {\n  return (\n    <Grid>\n      <tbody>\n        {board.map((row, row_i) => (\n          <GridRow key={row_i}>\n            {row.map((block, cell_i) => (\n              <GridItem\n                key={cell_i}\n                onClick={(e) => onCellClick(e, block)}\n                onContextMenu={(e) => onCellRightClick(e, block)}\n              >\n                <Block {...block} />\n              </GridItem>\n            ))}\n          </GridRow>\n        ))}\n      </tbody>\n    </Grid>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ntype ModalProps = {\n  showing: boolean;\n  background: string;\n};\n\nconst StyledModal = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 500;\n  width: 300px;\n  height: 150px;\n  background-color: ${(p: ModalProps) => p.background};\n  border-radius: 20px;\n  box-shadow: 5px 5px 3px grey;\n  display: ${(p: { showing: boolean }) => (p.showing ? \"flex\" : \"none\")};\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst Modal: React.FC<ModalProps> = (props) => {\n  return <StyledModal {...props}>{props.children}</StyledModal>;\n};\n\nexport default Modal;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Modal from \"./Modal\";\nimport Button from \"./Button\";\n\nenum ModalColor {\n  SUCCESS = \"#35c575\",\n  FAILURE = \"#c54545\",\n}\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  width: 75%;\n  justify-content: space-around;\n`;\n\nconst RestartButton = styled(Button)`\n  background-color: aquamarine;\n  &:hover {\n    background-color: #72e2bd;\n  }\n`;\n\nconst NextLevelButton = styled(Button)`\n  background-color: orange;\n  &:hover {\n    background-color: #e49400;\n  }\n`;\n\nconst GameModal: React.FC<{\n  isShowing: boolean;\n  success: boolean;\n  handleRestart: () => void;\n  showNext: boolean;\n  handleNext: () => void;\n}> = ({ isShowing, success, handleRestart, showNext, handleNext }) => {\n  const message = success ? \"You got 'em all! You win!\" : \"💥BOOM!!!💥\";\n  return (\n    <Modal\n      showing={isShowing}\n      background={success ? ModalColor.SUCCESS : ModalColor.FAILURE}\n    >\n      <p>{message}</p>\n      <ButtonGroup>\n        <RestartButton onClick={handleRestart}>Restart</RestartButton>\n        {showNext && (\n          <NextLevelButton onClick={handleNext}>Next</NextLevelButton>\n        )}\n      </ButtonGroup>\n    </Modal>\n  );\n};\n\nexport default GameModal;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { uncoverBlock, flagBlock, setupBoard } from \"../utils\";\nimport { BlockType, BlockValue, Bomb, DifficultyLevel } from \"../types\";\nimport useModal from \"../hooks/useModal\";\nimport StatusBar from \"./StatusBar\";\nimport Board from \"./Board\";\nimport DifficultyMap, { defaultConfig } from \"../difficulties\";\nimport GameModal from \"./GameModal\";\n\nconst MiddleOfScreen = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`;\n\nconst Container = styled.div`\n  max-width: 500px;\n`;\n\nconst Title = styled.h1`\n  margin-top: 0px;\n  margin-bottom: 0px;\n  text-align: center;\n`;\n\nconst Game = () => {\n  const { isShowing, showModal, clearModal, success } = useModal();\n  const [winCount, setWinCount] = useState(0);\n  const [lossCount, setLossCount] = useState(0);\n  const endGame = (won: boolean) => {\n    if (won) {\n      setWinCount(winCount + 1);\n      showModal(true);\n    } else {\n      setLossCount(lossCount + 1);\n      showModal(false);\n    }\n  };\n\n  const [difficultyLevel, setDifficultyLevel] = useState(DifficultyLevel.EASY);\n  const { size, bombCount } =\n    DifficultyMap.get(difficultyLevel) ?? defaultConfig;\n\n  const changeDifficulty = (level: DifficultyLevel) => {\n    const config = DifficultyMap.get(level);\n    if (config !== undefined) {\n      setDifficultyLevel(level);\n      restartGame(config.size, config.bombCount);\n    }\n  };\n\n  const [bombs, setBombs] = useState<Bomb[]>([]);\n  const [board, setBoard] = useState<BlockType[][]>(() => {\n    const { initialBoard, bombs } = setupBoard(\n      size.width,\n      size.height,\n      bombCount\n    );\n    setBombs(bombs);\n    return initialBoard;\n  });\n\n  const [flagsLeft, setFlagsLeft] = useState(bombCount);\n\n  const restartGame = (\n    size: { width: number; height: number },\n    bombCount: number\n  ) => {\n    const { initialBoard, bombs } = setupBoard(\n      size.width,\n      size.height,\n      bombCount\n    );\n    clearModal();\n    setBombs(bombs);\n    setFlagsLeft(bombCount);\n    setBoard(initialBoard);\n  };\n\n  const handleCellClick = (e: React.MouseEvent, block: BlockType) => {\n    const { board: newBoard, recoveredFlags } = uncoverBlock(board, block);\n    setBoard(newBoard);\n    setFlagsLeft(flagsLeft + recoveredFlags);\n    if (block.value === BlockValue.BOMB) {\n      endGame(false);\n    }\n  };\n\n  const handleCellRightClick = (e: React.MouseEvent, block: BlockType) => {\n    e.preventDefault();\n    const alreadyFlagged = block.flagged;\n    if (!alreadyFlagged && flagsLeft === 0) {\n      console.log(\"No more flags!\");\n      return;\n    }\n    setFlagsLeft(flagsLeft + (alreadyFlagged ? 1 : -1));\n    setBoard((boardState) => {\n      // right click\n      return flagBlock(boardState, block);\n    });\n    const newBombs = bombs.map((bomb) => {\n      if (\n        block.position.row === bomb.position.row &&\n        block.position.col === bomb.position.col\n      ) {\n        return { ...bomb, flagged: !bomb.flagged };\n      }\n      return bomb;\n    });\n    if (\n      newBombs.reduce(\n        (allFlagged, current) => allFlagged && current.flagged,\n        newBombs[0].flagged\n      )\n    ) {\n      endGame(true);\n    }\n    setBombs(newBombs);\n  };\n\n  return (\n    <MiddleOfScreen>\n      <Container>\n        <GameModal\n          isShowing={isShowing}\n          success={success}\n          handleRestart={() => restartGame(size, bombCount)}\n          showNext={success && difficultyLevel !== DifficultyLevel.HARD}\n          handleNext={() => {\n            if (difficultyLevel === DifficultyLevel.EASY) {\n              changeDifficulty(DifficultyLevel.MEDIUM);\n            } else if (difficultyLevel === DifficultyLevel.MEDIUM) {\n              changeDifficulty(DifficultyLevel.HARD);\n            }\n          }}\n        />\n\n        <Title>Minesweeper</Title>\n        <StatusBar\n          flagsLeft={flagsLeft}\n          wins={winCount}\n          losses={lossCount}\n          currentDifficulty={difficultyLevel}\n          onClickChangeDifficulty={changeDifficulty}\n        />\n        <Board\n          board={board}\n          onCellClick={handleCellClick}\n          onCellRightClick={handleCellRightClick}\n        />\n      </Container>\n    </MiddleOfScreen>\n  );\n};\n\nexport default Game;\n","import React from \"react\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}